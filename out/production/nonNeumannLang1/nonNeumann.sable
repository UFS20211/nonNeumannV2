Package nonneumann;

Helpers
  digito = ['0'..'9'];
  letra = ['a'..'z'] | ['A'..'Z'];
  espaco_em_branco = (' ' | 13 | 10)+;
  cr = 13;
  lf = 10;
  eol = (cr | lf | cr lf);
  caracteres = [0 .. 0xffff];

Tokens
  comentario_linha = '#' [caracteres - [cr + lf]]* eol*;
  comentario_bloco = '{-' caracteres* '-}';
  espaco_em_branco = espaco_em_branco;
  //Operadores lógicos
  operador_booleano_e = 'e';
  operador_booleano_ou = 'ou';
  operador_booleano_nao = 'nao';

  //Reservados true ou falso
  booleano_verdade = 'verdade';
  booleano_falso = 'falso';

  // Reservadas da linguagem
  reservada_se = 'se';
  reservado_entao ='entao';
  reservada_senao = 'senao';
  reservada_numerica = 'numerica';
  reservada_booleana = 'booleana';
  tipo_numero = 'numero';
  tipo_booleano = 'booleano';
  reservada_funcao = 'funcao';
  reservada_const = 'const';
  reservada_lambda = 'lambda';

  identificador = letra+;

  //Operadores aritméticos
  soma = '+';
  menos = '-';
  multiplicacao = '*';
  divisao_inteira = '//';
  divisao = '/';

  identificador_funcao_main = '>>';

  //Operadores relacionais
  maior_que = '>';
  menor_que = '<';
  igual = '=';


  operador_vinculacao = ':=';
  dois_pontos = ':';
  ponto_final = '.';
  parentese_esquerdo = '(';
  parentese_direito = ')';
  colchete_esquerdo = '[';
  colchete_direito = ']';
  pipe = '|';

  numero_binario = '0b'('0'|'1')+;
  numero_real = digito+ ',' digito+;
  numero_inteiro=digito+;

Ignored Tokens
   espaco_em_branco,
   comentario_linha,
   comentario_bloco;



Productions

programa { -> a_programa } =
    {dec_funcao} dec_funcao* {-> New a_programa.ar_programa([dec_funcao.a_dec_funcao])};

dec_funcao { -> a_dec_funcao} =
    {dec_funcao} identificador_funcao_main? funcao {-> New a_dec_funcao.ar_dec_funcao(funcao.a_funcao)};

funcao { -> a_funcao} =
    {funcao} reservada_funcao [retorno]:tipo_retorno [nome]:identificador colchete_esquerdo [args]:parametros colchete_direito dois_pontos [parameter]:colchete_esquerdo [expr]:expressao [parameter2]:colchete_direito ponto_final
    {-> New a_funcao.ar_funcao(retorno.a_tipo_retorno, nome, args.a_parametros, expr.a_expressao)};

tipo_retorno { -> a_tipo_retorno} =
   {numerica} reservada_numerica {-> New a_tipo_retorno.ar_reservada_numerica(reservada_numerica)}
  |{booleana} reservada_booleana {-> New a_tipo_retorno.ar_reservada_booleana(reservada_booleana)};

parametros { -> a_parametros} =
      {parametros} parametro outro_parametro* {-> New a_parametros.ar_parametros([parametro.a_parametro, outro_parametro.a_parametro])}
     |{vazio} { -> New a_parametros.ar_parametros([])};

assinatura {-> a_assinatura}  =
  {assinatura} reservada_funcao [retorno]:tipo_retorno [nome]:identificador colchete_esquerdo [assinaturas]:parametros_assinatura colchete_direito
  {-> New a_assinatura.ar_assinatura(retorno.a_tipo_retorno,nome,assinaturas.a_parametros_assinatura)};

outro_parametro { -> a_parametro } =
  {outro_parametro} pipe parametro {-> parametro.a_parametro };

parametro { -> a_parametro} =
   {parametro} [tipo_esq]:tipo identificador {-> New a_parametro.ar_parametro(tipo_esq.a_tipo, identificador) }
  |{assinatura} [assinatura]:assinatura {-> New a_parametro.ar_assinatura(assinatura.a_assinatura)};


parametros_assinatura { -> a_parametros_assinatura} =
    {parametros_assinatura} parametro_assinatura fecho_parametro_assinatura*
    {-> New a_parametros_assinatura.ar_parametros_assinatura([parametro_assinatura.a_parametro_assinatura, fecho_parametro_assinatura.a_parametro_assinatura])}
    |{vazio} { -> New a_parametros_assinatura.ar_parametros_assinatura([])};

fecho_parametro_assinatura { -> a_parametro_assinatura} =
    {fecho_parametro_assinatura} pipe parametro_assinatura {-> parametro_assinatura.a_parametro_assinatura};

parametro_assinatura { -> a_parametro_assinatura} =
    {tipo} [tipo]:tipo { -> New a_parametro_assinatura.ar_tipo(tipo.a_tipo) }
   |{assinatura} [assinatura]:assinatura { -> New a_parametro_assinatura.ar_assinatura(assinatura.a_assinatura)};

expressao {-> a_expressao} =
    {expressao_com_precedencia} expressao_com_precedencia { -> expressao_com_precedencia.a_expressao }
   |{condicao} [cond]:condicao {-> New a_expressao.ar_condicao(cond.a_condicao)};

expressao_com_precedencia {-> a_expressao} =
    {ou} [left]:expressao_com_precedencia operador_booleano_ou [right]:expressao_com_e
        { -> New a_expressao.ar_logico_ou(left.a_expressao, right.a_expressao)}
    | {e} expressao_com_e { -> expressao_com_e.a_expressao};

expressao_com_e { -> a_expressao} =
    {e} [left]:expressao_com_e operador_booleano_e [right]:expressao_com_nao
    { -> New a_expressao.ar_logico_e(left.a_expressao, right.a_expressao)}
    |{nao} expressao_com_nao { -> expressao_com_nao.a_expressao };

expressao_com_nao { -> a_expressao} =
    {nao} operador_booleano_nao [expr]:expressao_com_nao
    { -> New a_expressao.ar_logico_nao(expr.a_expressao) }
    |{relacional} expressao_relacional { -> expressao_relacional.a_expressao };

expressao_relacional { -> a_expressao} =
    {maior} [left]:expressao_aritmetica maior_que [right]:expressao_aritmetica
    {-> New a_expressao.ar_rel_maior(left.a_expressao, right.a_expressao) }
   |{menor} [left]:expressao_aritmetica menor_que [right]:expressao_aritmetica
    {-> New a_expressao.ar_rel_menor(left.a_expressao, right.a_expressao)}
   |{igual} [left]:expressao_aritmetica igual [right]:expressao_aritmetica
    {-> New a_expressao.ar_rel_igual(left.a_expressao, right.a_expressao) }
   |{aritmetica} expressao_aritmetica { -> expressao_aritmetica.a_expressao };

expressao_aritmetica { -> a_expressao} =
    {soma} [left]:expressao_aritmetica soma [right]:termo
    {-> New a_expressao.ar_arit_soma(left.a_expressao, right.a_expressao) }
   |{subtracao} [left]:expressao_aritmetica menos [right]:termo
   {-> New a_expressao.ar_arit_sub(left.a_expressao, right.a_expressao)}
   |{termo} termo { -> termo.a_expressao};

termo { -> a_expressao} =
    {mult} [left]:termo multiplicacao [right]:fator
    {-> New a_expressao.ar_arit_mult(left.a_expressao, right.a_expressao)}
   |{divisao} [left]:termo divisao [right]:fator
   {-> New a_expressao.ar_arit_div(left.a_expressao, right.a_expressao)}
   |{divisao_inteira} [left]:termo divisao_inteira [right]:fator
   {-> New a_expressao.ar_arit_div_int(left.a_expressao, right.a_expressao)}
   |{fator} fator {-> fator.a_expressao};

fator { -> a_expressao }=
    {parenteses} parentese_esquerdo [expr]:expressao parentese_direito { -> expr.a_expressao }
   |{numeros} numeros { -> numeros.a_expressao}
   |{logicos} logicos { -> logicos.a_expressao}
   |{identificador} [nome]:identificador { -> New a_expressao.ar_identificador(nome)}
   |{chamada} chamada {-> New a_expressao.ar_chamada(chamada.a_chamada)}
   |{lambda} lambda { -> New a_expressao.ar_lambda(lambda.a_lambda)}
   |{bloco_expressao} bloco_expressao { -> New a_expressao.ar_bloco_expressao(bloco_expressao.a_bloco_expressao)};
  // |{menos_exp} menos fator;

numeros { -> a_expressao } =
     {numero_inteiro} numero_inteiro { -> New a_expressao.ar_numero_inteiro(numero_inteiro)}
    |{numero_real} numero_real { -> New a_expressao.ar_numero_real(numero_real)}
    |{numero_binario} numero_binario { -> New a_expressao.ar_numero_binario(numero_binario)};

logicos { -> a_expressao } =
   {verdade} booleano_verdade { -> New a_expressao.ar_booleano_verdade(booleano_verdade)}
  |{falso} booleano_falso { -> New a_expressao.ar_booleano_falso(booleano_falso)};

chamada { -> a_chamada} =
    {ar_chamada}  [nome]:identificador colchete_esquerdo [exprs]:lista_exp colchete_direito
    { -> New a_chamada.ar_chamada(nome, exprs.a_lista_expr)};

lambda { -> a_lambda } =
    reservada_lambda colchete_esquerdo [ls_ids]:lista_ids colchete_direito dois_pontos parentese_esquerdo [expr]:expressao parentese_direito [parameter3]:colchete_esquerdo [ls_exp]:lista_exp [parameter4]:colchete_direito
    { -> New a_lambda.ar_lambda(ls_ids.a_lista_ids, expr.a_expressao, ls_exp.a_lista_expr)};

lista_exp { -> a_lista_expr} =
    {lista_exp} expressao fecho_expressao*
    { -> New a_lista_expr.ar_lista_expr([expressao.a_expressao, fecho_expressao.a_expressao])}
   |{vazio} { -> New a_lista_expr.ar_lista_expr([])};

fecho_expressao { -> a_expressao } =
    {fecho_expressao} pipe [expr]:expressao {-> expr.a_expressao };

lista_ids { -> a_lista_ids} =
    {lista_ids} identificador [resto]:fecho_identificador*
    { -> New a_lista_ids.ar_lista_ids([identificador] + resto.a_lista_ids)}
    |{vazio} { -> New a_lista_ids.ar_lista_ids([])};

fecho_identificador { -> a_lista_ids }  =
  {fecho_identificador} pipe identificador { -> New a_lista_ids.ar_lista_ids([identificador])};

bloco_expressao { -> a_bloco_expressao } =
    {bloco_expressao} colchete_esquerdo [decl_con]:declaracao_constante* [expr]:expressao colchete_direito
    { -> New a_bloco_expressao.ar_bloco_expressao([decl_con.a_declaracao_constante], expr.a_expressao)};

declaracao_constante { -> a_declaracao_constante } =
   {declaracao_constante} reservada_const [tipo]:tipo [nome]:identificador operador_vinculacao [expr]:expressao ponto_final
   { -> New a_declaracao_constante.ar_declaracao_constante(tipo.a_tipo, nome, expr.a_expressao)};

tipo {-> a_tipo} =
   {numero} tipo_numero {-> New a_tipo.ar_tipo_numero(tipo_numero)}
  |{booleano} tipo_booleano {-> New a_tipo.ar_tipo_booleano(tipo_booleano)};

condicao { -> a_condicao} =
    {condicao} reservada_se parentese_esquerdo [cond]:expressao parentese_direito reservado_entao [entao]:expressao reservada_senao [senao]:expressao
    { -> New a_condicao.ar_condicao(cond.a_expressao, entao.a_expressao, senao.a_expressao)};


Abstract Syntax Tree

a_programa =
    {ar_programa} a_dec_funcao*;

a_dec_funcao =
    {ar_dec_funcao} a_funcao;

a_funcao =
    {ar_funcao} [retorno]:a_tipo_retorno [nome]:identificador [args]:a_parametros [expr]:a_expressao;

a_tipo =
    {ar_tipo_numero} tipo_numero
   |{ar_tipo_booleano} tipo_booleano;

a_tipo_retorno =
    {ar_reservada_numerica} reservada_numerica
  | {ar_reservada_booleana} reservada_booleana;

a_parametros =
    {ar_parametros} a_parametro*;

a_parametro =
    {ar_parametro} a_tipo identificador
   |{ar_assinatura} a_assinatura;

a_assinatura =
  {ar_assinatura} a_tipo_retorno identificador a_parametros_assinatura;

a_parametros_assinatura =
    {ar_parametros_assinatura} a_parametro_assinatura*;

a_parametro_assinatura =
    {ar_tipo} a_tipo
   |{ar_assinatura} a_assinatura;

a_expressao =
        {ar_condicao} a_condicao
      | {ar_chamada} a_chamada
      | {ar_lambda} a_lambda
      | {ar_bloco_expressao} a_bloco_expressao
      | {ar_logico_ou} [left]:a_expressao [right]:a_expressao
      | {ar_logico_e} [left]:a_expressao [right]:a_expressao
      | {ar_logico_nao} a_expressao
      | {ar_rel_maior} [left]:a_expressao [right]:a_expressao
      | {ar_rel_menor} [left]:a_expressao [right]:a_expressao
      | {ar_rel_igual} [left]:a_expressao [right]:a_expressao
      | {ar_arit_soma} [left]:a_expressao [right]:a_expressao
      | {ar_arit_sub} [left]:a_expressao [right]:a_expressao
      | {ar_arit_mult} [left]:a_expressao [right]:a_expressao
      | {ar_arit_div} [left]:a_expressao [right]:a_expressao
      | {ar_arit_div_int} [left]:a_expressao [right]:a_expressao
      | {ar_numero_inteiro} numero_inteiro
      | {ar_numero_real} numero_real
      | {ar_numero_binario} numero_binario
      | {ar_booleano_verdade} booleano_verdade
      | {ar_booleano_falso} booleano_falso
      | {ar_identificador} identificador;

a_condicao =
    {ar_condicao} [cond]:a_expressao [entao]:a_expressao [senao]:a_expressao;

a_lambda =
    {ar_lambda} a_lista_ids a_expressao a_lista_expr;

a_chamada =
    {ar_chamada} [nome]:identificador [exprs]:a_lista_expr;

a_bloco_expressao =
    {ar_bloco_expressao} a_declaracao_constante* a_expressao;

a_declaracao_constante =
    {ar_declaracao_constante} a_tipo identificador a_expressao;

a_lista_expr =
    {ar_lista_expr} a_expressao*;

a_lista_ids =
  {ar_lista_ids} identificador*;