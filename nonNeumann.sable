Package nonneumann;

Helpers
  digito = ['0'..'9'];
  letra = ['a'..'z'] | ['A'..'Z'];
  espaco_em_branco = (' ' | 13 | 10)+;
  cr = 13;
  lf = 10;
  eol = (cr | lf | cr lf);
  caracteres = [0 .. 0xffff];

Tokens
  comentario_linha = '#' [caracteres - [cr + lf]]* eol*;
  comentario_bloco = '{-' [caracteres - ['-'+'}'] ]* '-}';
  espaco_em_branco = espaco_em_branco;

  //Operadores lógicos
  operador_booleano_e = 'e';
  operador_booleano_ou = 'ou';
  operador_booleano_nao = 'nao';

  //Reservados true ou falso
  booleano_verdade = 'verdade';
  booleano_falso = 'falso';

  // Reservadas da linguagem
  reservada_se = 'se';
  reservado_entao ='entao';
  reservada_senao = 'senao';
  reservada_numerica = 'numerica';
  reservada_booleano = 'booleano';
  reservada_booleana = 'booleana';
  tip_numero = 'numero';
  reservada_funcao = 'funcao';
  reservada_const = 'const';
  reservada_lambda = 'lambda';

  identificador = letra+;

  //Operadores aritméticos
  soma = '+';
  menos = '-';
  multiplicacao = '*';
  divisao_inteira = '//';
  divisao = '/';

  identificador_funcao_main = '>>';

  //Operadores relacionais
  maior_que = '>';
  menor_que = '<';
  igual = '=';

  //
  operador_vinculacao = ':=';
  dois_pontos = ':';
  ponto_final = '.';
  parentese_esquerdo = '(';
  parentese_direito = ')';
  colchete_esquerdo = '[';
  colchete_direito = ']';
  pipe = '|';

  numero_binario = '0b'('0'|'1')+;
  numero_real = digito+ ',' digito+;
  numero=digito+;

Ignored Tokens
   espaco_em_branco, comentario_linha, comentario_bloco;
