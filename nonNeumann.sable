Package nonneumann;

Helpers
  digito = ['0'..'9'];
  letra = ['a'..'z'] | ['A'..'Z'];
  espaco_em_branco = (' ' | 13 | 10)+;
  cr = 13;
  lf = 10;
  eol = (cr | lf | cr lf);
  caracteres = [0 .. 0xffff];

Tokens
  comentario_linha = '#' [caracteres - [cr + lf]]* eol*;
  comentario_bloco = '{-' caracteres* '-}';
  espaco_em_branco = espaco_em_branco;
  //Operadores lógicos
  operador_booleano_e = 'e';
  operador_booleano_ou = 'ou';
  operador_booleano_nao = 'nao';

  //Reservados true ou falso
  booleano_verdade = 'verdade';
  booleano_falso = 'falso';

  // Reservadas da linguagem
  reservada_se = 'se';
  reservado_entao ='entao';
  reservada_senao = 'senao';
  reservada_numerica = 'numerica';
  reservada_booleana = 'booleana';
  tipo_numero = 'numero';
  tipo_booleano = 'booleano';
  reservada_funcao = 'funcao';
  reservada_const = 'const';
  reservada_lambda = 'lambda';

  identificador = letra+;

  //Operadores aritméticos
  soma = '+';
  menos = '-';
  multiplicacao = '*';
  divisao_inteira = '//';
  divisao = '/';

  identificador_funcao_main = '>>';

  //Operadores relacionais
  maior_que = '>';
  menor_que = '<';
  igual = '=';


  operador_vinculacao = ':=';
  dois_pontos = ':';
  ponto_final = '.';
  parentese_esquerdo = '(';
  parentese_direito = ')';
  colchete_esquerdo = '[';
  colchete_direito = ']';
  pipe = '|';

  numero_binario = '0b'('0'|'1')+;
  numero_real = digito+ ',' digito+;
  numero_inteiro=digito+;

Ignored Tokens
   espaco_em_branco,
   comentario_linha,
   comentario_bloco;



Productions

programa { -> a_programa } =
    {dec_funcao} dec_funcao* {-> New a_programa.ar_programa([dec_funcao.a_dec_funcao])};

dec_funcao { -> a_dec_funcao} =
    {dec_funcao} identificador_funcao_main? funcao {-> New a_dec_funcao.ar_dec_funcao(funcao.a_funcao)};

funcao { -> a_funcao} =
    {funcao} reservada_funcao [retorno]:tipo_retorno [nome]:identificador colchete_esquerdo [args]:parametros colchete_direito dois_pontos [parameter]:colchete_esquerdo [expr]:expressao [parameter2]:colchete_direito ponto_final
    {-> New a_funcao.ar_funcao(retorno.a_tipo_retorno, nome, args.a_parametros)};

tipo_retorno { -> a_tipo_retorno} =
   {numerica} reservada_numerica {-> New a_tipo_retorno.ar_reservada_numerica(reservada_numerica)}
  |{booleana} reservada_booleana {-> New a_tipo_retorno.ar_reservada_booleana(reservada_booleana)};

parametros { -> a_parametros} =
      {parametros} parametro outro_parametro* {-> New a_parametros.ar_parametros([parametro.a_parametro, outro_parametro.a_parametro])}
     |{vazio} { -> New a_parametros.ar_parametros([])};

assinatura {-> a_assinatura}  =
  {assinatura} reservada_funcao [retorno]:tipo_retorno [nome]:identificador colchete_esquerdo [assinaturas]:parametros_assinatura colchete_direito
  {-> New a_assinatura.ar_assinatura(retorno.a_tipo_retorno,nome,assinaturas.a_parametros_assinatura)};

outro_parametro { -> a_parametro } =
  {outro_parametro} pipe parametro {-> parametro.a_parametro };

parametro { -> a_parametro} =
   {parametro} [tipo_esq]:tipo identificador {-> New a_parametro.ar_parametro(tipo_esq.a_tipo, identificador) }
  |{assinatura} [assinatura]:assinatura {-> New a_parametro.ar_assinatura(assinatura.a_assinatura)};


parametros_assinatura { -> a_parametros_assinatura} =
    {parametros_assinatura} parametro_assinatura fecho_parametro_assinatura*
    {-> New a_parametros_assinatura.ar_parametros_assinatura([parametro_assinatura.a_parametro_assinatura, fecho_parametro_assinatura.a_parametro_assinatura])}
    |{vazio} { -> New a_parametros_assinatura.ar_parametros_assinatura([])};

fecho_parametro_assinatura { -> a_parametro_assinatura} =
    {fecho_parametro_assinatura} pipe parametro_assinatura {-> parametro_assinatura.a_parametro_assinatura};

parametro_assinatura { -> a_parametro_assinatura} =
    {tipo} [tipo]:tipo { -> New a_parametro_assinatura.ar_tipo(tipo.a_tipo) }
   |{assinatura} [assinatura]:assinatura { -> New a_parametro_assinatura.ar_assinatura(assinatura.a_assinatura)};

expressao =
    {expressao_com_precedencia} expressao_com_precedencia
   |{condicao} condicao;

expressao_com_precedencia =
    {ou} expressao_com_precedencia operador_booleano_ou expressao_com_e
    | {e} expressao_com_e;

expressao_com_e =
    {e} expressao_com_e operador_booleano_e expressao_com_nao
    |{nao} expressao_com_nao;

expressao_com_nao =
    {nao} operador_booleano_nao expressao_com_nao
    |{relacional} expressao_relacional;

expressao_relacional =
    {maior} [parameter5]:expressao_aritmetica maior_que [parameter6]:expressao_aritmetica
   |{menor} [parameter7]:expressao_aritmetica menor_que [parameter8]:expressao_aritmetica
   |{igual} [parameter9]:expressao_aritmetica igual [parameter10]:expressao_aritmetica
   |{aritmetica} expressao_aritmetica;

expressao_aritmetica =
    {soma} expressao_aritmetica soma termo
   |{subtracao} expressao_aritmetica menos termo
   |{termo} termo;

termo =
    {mult} termo multiplicacao fator
   |{divisao} termo divisao fator
   |{divisao_inteira} termo divisao_inteira fator
   |{fator} fator;

fator =
    {parenteses} parentese_esquerdo expressao parentese_direito
   |{numeros} numeros
   |{logicos} logicos
   |{identificador} identificador
   |{chamada} chamada
   |{lambda} lambda
   |{bloco_expressao} bloco_expressao
   |{menos_exp} menos fator;

numeros =
     {numero_inteiro} numero_inteiro
    |{numero_real} numero_real
    |{numero_binario} numero_binario;

logicos =
   {verdade} booleano_verdade
  |{falso} booleano_falso;

chamada =
      identificador colchete_esquerdo lista_exp colchete_direito;

lambda =
    reservada_lambda colchete_esquerdo lista_ids colchete_direito dois_pontos parentese_esquerdo expressao parentese_direito [parameter3]:colchete_esquerdo lista_exp [parameter4]:colchete_direito;

lista_exp =
    {lista_exp} expressao fecho_expressao*
   |{vazio};

fecho_expressao =
    {fecho_expressao} pipe expressao;

lista_ids =
    {lista_ids} identificador fecho_identificador*
   |{vazio};

fecho_identificador =
  {fecho_identificador} pipe identificador;

bloco_expressao =
    {bloco_expressao} colchete_esquerdo declaracao_constante* expressao colchete_direito;

declaracao_constante =
   {declaracao_constante} reservada_const tipo identificador operador_vinculacao expressao ponto_final;

tipo {-> a_tipo} =
   {numero} tipo_numero {-> New a_tipo.ar_tipo_numero(tipo_numero)}
  |{booleano} tipo_booleano {-> New a_tipo.ar_tipo_booleano(tipo_booleano)};

condicao =
    {condicao} reservada_se parentese_esquerdo expressao parentese_direito reservado_entao [parameter]:expressao reservada_senao [parameter2]:expressao;



Abstract Syntax Tree

a_programa =
    {ar_programa} a_dec_funcao*;

a_dec_funcao =
    {ar_dec_funcao} a_funcao;

a_funcao =
    {ar_funcao} [retorno]:a_tipo_retorno [nome]:identificador [args]:a_parametros;

a_tipo =
    {ar_tipo_numero} tipo_numero
   |{ar_tipo_booleano} tipo_booleano;

a_tipo_retorno =
    {ar_reservada_numerica} reservada_numerica
  | {ar_reservada_booleana} reservada_booleana;

a_parametros =
    {ar_parametros} a_parametro*;

a_parametro =
    {ar_parametro} a_tipo identificador
   |{ar_assinatura} a_assinatura;

a_assinatura =
  {ar_assinatura} a_tipo_retorno identificador a_parametros_assinatura;

a_parametros_assinatura =
    {ar_parametros_assinatura} a_parametro_assinatura*;

a_parametro_assinatura =
    {ar_tipo} a_tipo
   |{ar_assinatura} a_assinatura;